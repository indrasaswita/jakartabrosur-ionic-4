{"version":3,"sources":["webpack:///./src/app/customersales/customersales.module.ts","webpack:///./src/app/customersales/customersales.page.html","webpack:///./src/app/customersales/customersales.page.scss","webpack:///./src/app/customersales/customersales.page.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAyC;AACM;AACF;AACU;AAEV;AAEY;AAEzD,IAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,qEAAiB;KAC7B;CACF,CAAC;AAWF;IAAA;IAAsC,CAAC;IAA1B,uBAAuB;QATnC,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,0DAAW;gBACX,0DAAW;gBACX,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;aAC9B;YACD,YAAY,EAAE,CAAC,qEAAiB,CAAC;SAClC,CAAC;OACW,uBAAuB,CAAG;IAAD,8BAAC;CAAA;AAAH;;;;;;;;;;;;ACzBpC,mxB;;;;;;;;;;;ACAA,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAkD;AACA;AACF;AACT;AAQvC;IAOC,2BACQ,MAAsB,EACtB,IAAgB,EAChB,MAAc;QAFd,WAAM,GAAN,MAAM,CAAgB;QACtB,SAAI,GAAJ,IAAI,CAAY;QAChB,WAAM,GAAN,MAAM,CAAQ;QAErB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IACvB,CAAC;IAED,oCAAQ,GAAR;QACC,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAC7B,CAAC;IAED,gDAAoB,GAApB;QACC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,GAAC,EAAE,CAAC;IAC9B,CAAC;IAED,2CAAe,GAAf;QAGC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAEvB,uDAAuD;QACvD,6CAA6C;QAC7C,mCAAmC;QACnC,EAAE;QACF,oBAAoB;QACpB,8BAA8B;QAC9B,MAAM;IACP,CAAC;IApCW,iBAAiB;QAL7B,+DAAS,CAAC;YACV,QAAQ,EAAE,mBAAmB;;;SAG7B,CAAC;yCASe,+DAAc;YAChB,+DAAU;YACR,sDAAM;OAVV,iBAAiB,CAgD7B;IAAD,wBAAC;CAAA;AAhD6B","file":"customersales-customersales-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { CustomersalesPage } from './customersales.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CustomersalesPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [CustomersalesPage]\n})\nexport class CustomersalesPageModule {}\n","module.exports = \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button></ion-back-button>\\n    </ion-buttons>\\n    <ion-title>\\n      <i class=\\\"far fa-clipboard-list fa-fw\\\"></i>\\n      Customer & Sales\\n    </ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-card class=\\\"welcome-card\\\">\\n    <ion-card-header>\\n      <ion-card-subtitle>Get Started</ion-card-subtitle>\\n      <ion-card-title> QR Code and Barcode </ion-card-title>\\n    </ion-card-header>\\n    <ion-card-content>\\n      <p>Here we can scan a Qr code or Barcode to get data and we will also see how to generate Barcode.</p>\\n    </ion-card-content>\\n    <ion-button (click)=\\\"goToBarcodeScan()\\\">Click to scan a barcode</ion-button>\\n  </ion-card>\\n\\n</ion-content>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\nimport {GlobalsService} from \"../globals.service\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {Router} from \"@angular/router\";\nimport {BarcodeScannerOptions} from \"@ionic-native/barcode-scanner\";\n\n@Component({\n\tselector: 'app-customersales',\n\ttemplateUrl: './customersales.page.html',\n\tstyleUrls: ['./customersales.page.scss'],\n})\nexport class CustomersalesPage implements OnInit {\n\t\tcustomers: any;\n\t\tbarcodeCtrl: any;\n\t\tscannedData: any;\n\t\tencodedData: '';\n\t\tencodeData: any;\n\n\tconstructor(\n\t\tpublic global: GlobalsService,\n\t\tpublic http: HttpClient,\n\t\tpublic router: Router\n\t) {\n\t\tthis.customers = null;\n\t}\n\n\tngOnInit() {\n\t\tthis.getcustomersalesdata();\n\t}\n\t\n\tgetcustomersalesdata(){\n\t\tthis.customers = null;\n\t\tlet url = this.global.api+\"\";\n\t}\n\t\n\tgoToBarcodeScan() {\n\t\t\n\t\t\n\t\tconsole.log(\"abcdefg\");\n\t\t\n\t\t// this.barcodeCtrl.scan(options).then(barcodeData => {\n\t\t// \tconsole.log('Barcode data', barcodeData);\n\t\t// \tthis.scannedData = barcodeData;\n\t\t//\n\t\t// }).catch(err => {\n\t\t// \tconsole.log('Error', err);\n\t\t// });\n\t}\n\t\n\t\n\t// goToCreateCode() {\n\t// \t// \tthis.barcodeCtrl.encode(this.barcodeCtrl.Encode.TEXT_TYPE, this.encodeData).then((encodedData) => {\n\t// \t// \t\tconsole.log(encodedData);\n\t// \t// \t\tthis.encodedData = encodedData;\n\t// \t// \t}, (err) => {\n\t// \t// \t\tconsole.log('Error occured : ' + err);\n\t// \t// \t});\n\t// \t// }\n\n}\n"],"sourceRoot":""}